// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/telemetry.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PacketRequest struct {
	Packet               string   `protobuf:"bytes,1,opt,name=Packet,proto3" json:"Packet,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PacketRequest) Reset()         { *m = PacketRequest{} }
func (m *PacketRequest) String() string { return proto.CompactTextString(m) }
func (*PacketRequest) ProtoMessage()    {}
func (*PacketRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_telemetry_76b65980a9fc60cd, []int{0}
}
func (m *PacketRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PacketRequest.Unmarshal(m, b)
}
func (m *PacketRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PacketRequest.Marshal(b, m, deterministic)
}
func (dst *PacketRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PacketRequest.Merge(dst, src)
}
func (m *PacketRequest) XXX_Size() int {
	return xxx_messageInfo_PacketRequest.Size(m)
}
func (m *PacketRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PacketRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PacketRequest proto.InternalMessageInfo

func (m *PacketRequest) GetPacket() string {
	if m != nil {
		return m.Packet
	}
	return ""
}

type PacketResponse struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PacketResponse) Reset()         { *m = PacketResponse{} }
func (m *PacketResponse) String() string { return proto.CompactTextString(m) }
func (*PacketResponse) ProtoMessage()    {}
func (*PacketResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_telemetry_76b65980a9fc60cd, []int{1}
}
func (m *PacketResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PacketResponse.Unmarshal(m, b)
}
func (m *PacketResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PacketResponse.Marshal(b, m, deterministic)
}
func (dst *PacketResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PacketResponse.Merge(dst, src)
}
func (m *PacketResponse) XXX_Size() int {
	return xxx_messageInfo_PacketResponse.Size(m)
}
func (m *PacketResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PacketResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PacketResponse proto.InternalMessageInfo

func (m *PacketResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type DataResponse struct {
	Packet               string   `protobuf:"bytes,1,opt,name=Packet,proto3" json:"Packet,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DataResponse) Reset()         { *m = DataResponse{} }
func (m *DataResponse) String() string { return proto.CompactTextString(m) }
func (*DataResponse) ProtoMessage()    {}
func (*DataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_telemetry_76b65980a9fc60cd, []int{2}
}
func (m *DataResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataResponse.Unmarshal(m, b)
}
func (m *DataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataResponse.Marshal(b, m, deterministic)
}
func (dst *DataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataResponse.Merge(dst, src)
}
func (m *DataResponse) XXX_Size() int {
	return xxx_messageInfo_DataResponse.Size(m)
}
func (m *DataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DataResponse proto.InternalMessageInfo

func (m *DataResponse) GetPacket() string {
	if m != nil {
		return m.Packet
	}
	return ""
}

func init() {
	proto.RegisterType((*PacketRequest)(nil), "pb.PacketRequest")
	proto.RegisterType((*PacketResponse)(nil), "pb.PacketResponse")
	proto.RegisterType((*DataResponse)(nil), "pb.DataResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TelemetryClient is the client API for Telemetry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TelemetryClient interface {
	SendPacket(ctx context.Context, in *PacketRequest, opts ...grpc.CallOption) (*PacketResponse, error)
	GetPacket(ctx context.Context, in *PacketRequest, opts ...grpc.CallOption) (*DataResponse, error)
}

type telemetryClient struct {
	cc *grpc.ClientConn
}

func NewTelemetryClient(cc *grpc.ClientConn) TelemetryClient {
	return &telemetryClient{cc}
}

func (c *telemetryClient) SendPacket(ctx context.Context, in *PacketRequest, opts ...grpc.CallOption) (*PacketResponse, error) {
	out := new(PacketResponse)
	err := c.cc.Invoke(ctx, "/pb.Telemetry/SendPacket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryClient) GetPacket(ctx context.Context, in *PacketRequest, opts ...grpc.CallOption) (*DataResponse, error) {
	out := new(DataResponse)
	err := c.cc.Invoke(ctx, "/pb.Telemetry/GetPacket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TelemetryServer is the server API for Telemetry service.
type TelemetryServer interface {
	SendPacket(context.Context, *PacketRequest) (*PacketResponse, error)
	GetPacket(context.Context, *PacketRequest) (*DataResponse, error)
}

func RegisterTelemetryServer(s *grpc.Server, srv TelemetryServer) {
	s.RegisterService(&_Telemetry_serviceDesc, srv)
}

func _Telemetry_SendPacket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PacketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryServer).SendPacket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Telemetry/SendPacket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryServer).SendPacket(ctx, req.(*PacketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Telemetry_GetPacket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PacketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryServer).GetPacket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Telemetry/GetPacket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryServer).GetPacket(ctx, req.(*PacketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Telemetry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Telemetry",
	HandlerType: (*TelemetryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendPacket",
			Handler:    _Telemetry_SendPacket_Handler,
		},
		{
			MethodName: "GetPacket",
			Handler:    _Telemetry_GetPacket_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/telemetry.proto",
}

func init() { proto.RegisterFile("pb/telemetry.proto", fileDescriptor_telemetry_76b65980a9fc60cd) }

var fileDescriptor_telemetry_76b65980a9fc60cd = []byte{
	// 176 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2a, 0x48, 0xd2, 0x2f,
	0x49, 0xcd, 0x49, 0xcd, 0x4d, 0x2d, 0x29, 0xaa, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62,
	0x2a, 0x48, 0x52, 0x52, 0xe7, 0xe2, 0x0d, 0x48, 0x4c, 0xce, 0x4e, 0x2d, 0x09, 0x4a, 0x2d, 0x2c,
	0x4d, 0x2d, 0x2e, 0x11, 0x12, 0xe3, 0x62, 0x83, 0x08, 0x48, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06,
	0x41, 0x79, 0x4a, 0x5a, 0x5c, 0x7c, 0x30, 0x85, 0xc5, 0x05, 0xf9, 0x79, 0xc5, 0xa9, 0x42, 0x12,
	0x5c, 0xec, 0xc5, 0xa5, 0xc9, 0xc9, 0xa9, 0xc5, 0xc5, 0x60, 0xa5, 0x1c, 0x41, 0x30, 0xae, 0x92,
	0x1a, 0x17, 0x8f, 0x4b, 0x62, 0x49, 0x22, 0x5c, 0x25, 0x0e, 0x33, 0x8d, 0xca, 0xb8, 0x38, 0x43,
	0x60, 0x6e, 0x12, 0x32, 0xe5, 0xe2, 0x0a, 0x4e, 0xcd, 0x4b, 0x81, 0x48, 0x09, 0x09, 0xea, 0x15,
	0x24, 0xe9, 0xa1, 0xb8, 0x4c, 0x4a, 0x08, 0x59, 0x08, 0x62, 0xb2, 0x12, 0x83, 0x90, 0x11, 0x17,
	0xa7, 0x7b, 0x6a, 0x09, 0x6e, 0x5d, 0x02, 0x20, 0x21, 0x64, 0xd7, 0x28, 0x31, 0x24, 0xb1, 0x81,
	0xfd, 0x6f, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x01, 0xeb, 0x2c, 0xe1, 0x15, 0x01, 0x00, 0x00,
}
