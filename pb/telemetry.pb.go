// Code generated by protoc-gen-go.
// source: telemetry.proto
// DO NOT EDIT!

/*
Package telemetry is a generated protocol buffer package.

It is generated from these files:
	telemetry.proto

It has these top-level messages:
	PacketRequest
	PacketResponse
	DataResponse
*/
package telemetry

import proto "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

type PacketRequest struct {
	Packet string `protobuf:"bytes,1,opt" json:"Packet,omitempty"`
}

func (m *PacketRequest) Reset()         { *m = PacketRequest{} }
func (m *PacketRequest) String() string { return proto.CompactTextString(m) }
func (*PacketRequest) ProtoMessage()    {}

type PacketResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *PacketResponse) Reset()         { *m = PacketResponse{} }
func (m *PacketResponse) String() string { return proto.CompactTextString(m) }
func (*PacketResponse) ProtoMessage()    {}

type DataResponse struct {
	Packet string `protobuf:"bytes,1,opt" json:"Packet,omitempty"`
}

func (m *DataResponse) Reset()         { *m = DataResponse{} }
func (m *DataResponse) String() string { return proto.CompactTextString(m) }
func (*DataResponse) ProtoMessage()    {}

func init() {
}

// Client API for Telemetry service

type TelemetryClient interface {
	SendPacket(ctx context.Context, in *PacketRequest, opts ...grpc.CallOption) (*PacketResponse, error)
	GetPacket(ctx context.Context, in *PacketRequest, opts ...grpc.CallOption) (*DataResponse, error)
}

type telemetryClient struct {
	cc *grpc.ClientConn
}

func NewTelemetryClient(cc *grpc.ClientConn) TelemetryClient {
	return &telemetryClient{cc}
}

func (c *telemetryClient) SendPacket(ctx context.Context, in *PacketRequest, opts ...grpc.CallOption) (*PacketResponse, error) {
	out := new(PacketResponse)
	err := grpc.Invoke(ctx, "/telemetry.Telemetry/SendPacket", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryClient) GetPacket(ctx context.Context, in *PacketRequest, opts ...grpc.CallOption) (*DataResponse, error) {
	out := new(DataResponse)
	err := grpc.Invoke(ctx, "/telemetry.Telemetry/GetPacket", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Telemetry service

type TelemetryServer interface {
	SendPacket(context.Context, *PacketRequest) (*PacketResponse, error)
	GetPacket(context.Context, *PacketRequest) (*DataResponse, error)
}

func RegisterTelemetryServer(s *grpc.Server, srv TelemetryServer) {
	s.RegisterService(&_Telemetry_serviceDesc, srv)
}

func _Telemetry_SendPacket_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(PacketRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(TelemetryServer).SendPacket(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Telemetry_GetPacket_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(PacketRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(TelemetryServer).GetPacket(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Telemetry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "telemetry.Telemetry",
	HandlerType: (*TelemetryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendPacket",
			Handler:    _Telemetry_SendPacket_Handler,
		},
		{
			MethodName: "GetPacket",
			Handler:    _Telemetry_GetPacket_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
