deployment:
  replicaCount: 3

  podDisruptionBudget: {}
    # maxUnavailable: 1
    # minAvailable: 2

  securityContext:
    runAsUser: 997
    fsGroup: 997
    runAsNonRoot: true

  ## Duration in seconds the pod needs to terminate gracefully
  terminationGracePeriodSeconds: 30

  ## Deployments rolling update update strategy
  ## Ref: https://kubernetes.io/docs/tutorials/stateful-application/basic-stateful-set/#rolling-update
  ##
  updateStrategy: RollingUpdate

  ## Annotations to be added to the Service
  ##
  annotations: {}

  ## Affinity
  ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  affinity: {}

  ## Tolerations
  ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  tolerations: []

  ## Optionally specify an array of imagePullSecrets.
  ## Secrets must be manually created in the namespace.
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  ##
  # pullSecrets:
  #   - myRegistrKeySecretName

  ## Node selector
  ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
  nodeSelector: {}

  image:
    repository: hub.docker.com/batazor/go-logger
    tag: latest

    ## Specify a imagePullPolicy
    ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
    ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
    ##
    pullPolicy: IfNotPresent

  env:
    GRPC_ENABLE: "true"
    GRPC_PORT: "50051"
    AMQP_ENABLE: "true"
    AMQP_API: amqp://telemetry:telemetry@localhost:5672/
    AMQP_NAME_QUEUE: go-logger-packets
    AMQP_EXCHANGE_LIST: "demo1, demo2"
    AMQP_EXCHANGE_TYPE: headers
    PROMETHEUS_ENABLED: "true"
    OPENTRACING_ENABLED: "true"
    JAEGER_SERVICE_NAME: "go-logger"
    JAEGER_AGENT_HOST_PORT: "localhost:5778"
    JAEGER_RPC_METRICS: "true"

  ## Configure resource requests and limits
  ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
  ##
  resources:
    limits:
      cpu: 500m
      memory: 500Mi
    requests:
      cpu: 50m
      memory: 50Mi

  ## Configure extra options for liveness and readiness probes
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes)
  livenessProbe:
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 5

  readinessProbe:
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 1
    successThreshold: 1
    failureThreshold: 5

## Role Based Access
## Ref: https://kubernetes.io/docs/admin/authorization/rbac/
##
rbac:
  create: true

networkPolicy:
  ## Enable creation of NetworkPolicy resources.
  ##
  enabled: true

  ## The Policy model to apply. When set to false, only pods with the correct
  ## client label will have network access to the port Logger is listening
  ## on. When true, Logger will accept connections from any source
  ## (with the correct destination port).
  ##
  allowExternal: true

## Service Account
## Ref: https://kubernetes.io/docs/admin/service-accounts-admin/
##
serviceAccount:
  create: true

  ## The name of the ServiceAccount to use.
  ## If not set and create is true, a name is generated using the fullname template
  # name:

service:
  annotations: {}

  ## Kubernetes service type
  type: ClusterIP

  ## Port to expose on each node
  ## Only used if service.type is 'NodePort'
  ##
  # nodePort: 27017

prometheus:
  ## Configures Prometheus Exporter to expose and scrape stats.
  exporter:
    enabled: true
    env: {}
    image:
      registry: docker.io
      repository: oliver006/logger_exporter
      tag: v0.21.0
      pullPolicy: IfNotPresent

    ## Port Prometheus scrapes for metrics
    port: 9090

    path: "/metrics"

    ## Allow overriding of container resources
    resources: {}
     # limits:
     #   cpu: 200m
     #   memory: 1Gi
     # requests:
     #   cpu: 100m
     #   memory: 100Mi

  ## Prometheus is using Operator.  Setting to true will create Operator specific resources like ServiceMonitors and Alerts
  operator:
    ## Are you using Prometheus Operator? [Blog Post](https://coreos.com/blog/the-prometheus-operator.html)
    enabled: true

    ## Configures Alerts, which will be setup via Prometheus Operator / ConfigMaps.
    alerts:
      ## Prometheus exporter must be enabled as well
      enabled: true

      ## Selector must be configured to match Prometheus Install, defaulting to whats done by Prometheus Operator
      ## See [CoreOS Prometheus Chart](https://github.com/coreos/prometheus-operator/tree/master/helm)
      selector:
        role: alert-rules
      labels: {}

    serviceMonitor:
      ## Interval at which Prometheus scrapes logger Exporter
      interval: 10s

      # Namespace Prometheus is installed in
      namespace: monitoring

      ## Defaults to whats used if you follow CoreOS [Prometheus Install Instructions](https://github.com/coreos/prometheus-operator/tree/master/helm#tldr)
      ## [Prometheus Selector Label](https://github.com/coreos/prometheus-operator/blob/master/helm/prometheus/templates/prometheus.yaml#L65)
      ## [Kube Prometheus Selector Label](https://github.com/coreos/prometheus-operator/blob/master/helm/kube-prometheus/values.yaml#L298)
      selector:
        prometheus: kube-prometheus
