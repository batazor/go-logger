# .best_practices: &job_best_practices
#   type: best_practices
#   image: golang:1.9.2-alpine
#   before_script:
#   - apk add --no-cache git
#   only:
#   - /^(?:0|[1-9]\d*)\.(?:0|[1-9]\d*)\.(?:0|[1-9]\d*)-rc(?:0|[1-9]\d*)$/
#   allow_failure: true

.job_template_build: &job_build
  type: build
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  before_script:
  - apk add --no-cache git
  - mkdir -p /go/src/$GITHUB_PATH /go/src/_/builds
  - cp -r $CI_PROJECT_DIR /go/src/$GITHUB_PATH/$CI_PROJECT_NAME
  - ln -s /go/src/$GITHUB_PATH/$CI_PROJECT_NAME /go/src/_/builds/$CI_PROJECT_NAME
  - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  tags:
  - docker
  except:
  - branches
  when: on_success

.job_template_deploy: &job_deploy
  type: deploy
  image: service-image/helm
  variables:
    GIT_STRATEGY: none
  tags:
  - registry
  script:
  # GET LABEL/VALUE FROM $INFLUXDB_NODE_SELECT (a.e "influxdb:true")
  - export INFLUXDB_NODE_SELECT_LABEL "${INFLUXDB_NODE_SELECT%:*}"
  - export INFLUXDB_NODE_SELECT_VALUE "${INFLUXDB_NODE_SELECT#*:}"
  - echo $INFLUXDB_NODE_SELECT_LABEL
  - echo $INFLUXDB_NODE_SELECT_VALUE
  - export DEPLOYS=$(helm --kube-context $HELM_CONTEXT ls | grep $CI_PROJECT_NAME | wc -l)
  - if [ ${DEPLOYS}  -eq 0 ]; then
      helm --kube-context $HELM_CONTEXT install
        --name $CI_PROJECT_NAME
        --namespace=$PROJECT_NAMESPACE
        --set deployment.image.repository=$CI_REGISTRY_IMAGE
        --set deployment.image.tag=$CI_COMMIT_TAG
        --set deployment.env.AMQP_API=$AMQP_API
        --set deployment.env.AMQP_EXCHANGE_LIST=$AMQP_EXCHANGE_LIST
        --set influxdb.nodeSelector.test=test
        $HELM_PATH;
    else
      helm --kube-context $HELM_CONTEXT upgrade $CI_PROJECT_NAME $HELM_PATH
        --namespace=$PROJECT_NAMESPACE
        --set deployment.image.repository=$CI_REGISTRY_IMAGE
        --set deployment.image.tag=$CI_COMMIT_TAG
        --set deployment.env.AMQP_API=$AMQP_API
        --set deployment.env.AMQP_EXCHANGE_LIST=$AMQP_EXCHANGE_LIST
        --set influxdb.nodeSelector.test=test;
    fi
  except:
  - branches
  when: manual

.job_template_publish: &job_publish
  type: publish
  tags:
  - docker
  only:
  - /^(?:0|[1-9]\d*)\.(?:0|[1-9]\d*)\.(?:0|[1-9]\d*)-rc(?:0|[1-9]\d*)$/
  except:
  - branches
  when: on_success

image: docker:latest
services:
- docker:dind

stages:
# - best_practices
- build
- publish
- deploy

variables:
  GITHUB_PATH: github.com/batazor
  PROJECT_NAMESPACE: $PROJECT_NAMESPACE
  HELM_PATH: ops/Helm/go-logger
  HELM_VERSION: v2.9.1

# lint:
#   <<: *job_best_practices
#   script:
#   - go get -u github.com/golang/lint/golint
#   - golint -set_exit_status $(go list ./... | grep -v /vendor/)
#
# unit test:
#   <<: *job_best_practices
#   script:
#   - go test -short $(go list ./... | grep -v /vendor/)
#
# data race:
#   <<: *job_best_practices
#   script:
#   - go test -race -short $(go list ./... | grep -v /vendor/)

build:staging:
  <<: *job_build
  retry: 2
  script:
  - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG .
  - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
  only:
  - /^(?:0|[1-9]\d*)\.(?:0|[1-9]\d*)\.(?:0|[1-9]\d*)-rc(?:0|[1-9]\d*)$/

chart:
  <<: *job_publish
  script:
  # Install tool
  - apk add --update git openssl

  # install Helm
  - wget https://kubernetes-helm.storage.googleapis.com/helm-$HELM_VERSION-linux-amd64.tar.gz
  - tar -xvf helm-$HELM_VERSION-linux-amd64.tar.gz
  - mv linux-amd64/helm /usr/local/bin/helm
  - helm init -c

  # update charts
  - git clone https://$GITHUB_USER:$GITHUB_PASSWORD@$GITHUB_REPOSITORY_URL
  - helm package $HELM_PATH
  - mv *.tgz charts/docs
  - helm repo index charts/public
  - cd charts
  - git add .
  - git config --global user.email "authmicroservice@gmail.com"
  - git config --global user.name "CI bot"
  - git commit -m "Add/Update chart $CI_PROJECT_NAME:$CI_COMMIT_TAG"
  - git push

deploy:staging:
  <<: *job_deploy
  variables:
    HELM_CONTEXT: $STAGING_HELM_CONTEXT
  environment:
    name: Staging
  only:
    - /^(?:0|[1-9]\d*)\.(?:0|[1-9]\d*)\.(?:0|[1-9]\d*)-rc(?:0|[1-9]\d*)$/
