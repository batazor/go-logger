.best_practices: &job_best_practices
  type: best_practices
  image: golang:1.9.2-alpine
  before_script:
  - apk add --no-cache git
  only:
  - /^(?:0|[1-9]\d*)\.(?:0|[1-9]\d*)\.(?:0|[1-9]\d*)-rc(?:0|[1-9]\d*)$/
  allow_failure: true

.job_template_build: &job_build
  type: build
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  before_script:
  - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  except:
  - branches
  when: on_success

.job_template_deploy: &job_deploy
  type: deploy
  variables:
    GIT_STRATEGY: none
  script:
  - export DEPLOYS=$(helm ls | grep $RELEASE_NAME | wc -l)
  - if [ ${DEPLOYS}  -eq 0 ]; then
      helm --kube-context $HELM_NAMESPACE install
        --name $RELEASE_NAME
        --namespace=$CI_PROJECT_NAMESPACE
        --set CI_PROJECT_NAME=$CI_PROJECT_NAME
        --set CI_PIPELINE_ID=$CI_PIPELINE_ID
        --set CI_BUILD_ID=$CI_BUILD_ID
        --set image.tag=$CI_COMMIT_TAG
        --set CI_COMMIT_SHA=$CI_COMMIT_SHA
        $HELM_PATH;
    else
      helm --kube-context $HELM_NAMESPACE upgrade $RELEASE_NAME $HELM_PATH
        --namespace=$CI_PROJECT_NAMESPACE
        --set CI_PROJECT_NAME=$CI_PROJECT_NAME
        --set CI_PIPELINE_ID=$CI_PIPELINE_ID
        --set CI_BUILD_ID=$CI_BUILD_ID
        --set image.tag=$CI_COMMIT_TAG
        --set CI_COMMIT_SHA=$CI_COMMIT_SHA;
    fi
  except:
  - branches
  when: manual

.job_template_publish: &job_publish
  type: publish
  only:
  - /^(?:0|[1-9]\d*)\.(?:0|[1-9]\d*)\.(?:0|[1-9]\d*)-rc(?:0|[1-9]\d*)$/
  except:
  - branches
  when: on_success

image: docker:latest

before_script:
- apk add --no-cache git
- mkdir -p /go/src/$GITHUB_PATH /go/src/_/builds
- cp -r $CI_PROJECT_DIR /go/src/$GITHUB_PATH/$CI_PROJECT_NAME
- ln -s /go/src/$GITHUB_PATH/$CI_PROJECT_NAME /go/src/_/builds/$CI_PROJECT_NAME

services:
- docker:dind

stages:
- best_practices
- build
- publish
- deploy

cache:
  paths:
  - /apt-cache
  - /go/src/github.com
  - /go/src/golang.org
  - /go/src/google.golang.org
  - /go/src/gopkg.in

variables:
  GITHUB_PATH: gitlab.com/batazor
  PROJECT_NAMESPACE: micro-company
  RELEASE_NAME: $CI_PROJECT_NAME
  HELM_PATH: ops/Helm/go-logger
  DOCKER_IMAGE_URL: cros/go-logger

lint:
  <<: *job_best_practices
  script:
  - go get -u github.com/golang/lint/golint
  - golint -set_exit_status $(go list ./... | grep -v /vendor/)

unit test:
  <<: *job_best_practices
  script:
  - go test -short $(go list ./... | grep -v /vendor/)

data race:
  <<: *job_best_practices
  script:
  - go test -race -short $(go list ./... | grep -v /vendor/)


build:staging:
  <<: *job_build
  retry: 2
  script:
  - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG .
  - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
  only:
  - /^(?:0|[1-9]\d*)\.(?:0|[1-9]\d*)\.(?:0|[1-9]\d*)-rc(?:0|[1-9]\d*)$/

chart:
  <<: *job_publish
  script:
  # Install tool
  - apk add --update git openssl

  # install Helm
  - wget https://kubernetes-helm.storage.googleapis.com/helm-v2.9.1-linux-amd64.tar.gz
  - tar -xvf helm-v2.9.1-linux-amd64.tar.gz
  - mv linux-amd64/helm /usr/local/bin/helm
  - helm init -c

  # update charts
  - git clone https://$GITHUB_USER:$GITHUB_PASSWORD@github.com/micro-company/charts.git
  - helm package $HELM_PATH
  - mv *.tgz charts/docs
  - helm repo index charts/docs
  - cd charts
  - git add .
  - git config --global user.email "authmicroservice@gmail.com"
  - git config --global user.name "CI bot"
  - git commit -m "Add/Update chart $CI_PROJECT_NAME:$CI_COMMIT_TAG"
  - git push

deploy:staging:
  <<: *job_deploy
  variables:
    HELM_NAMESPACE: minikube
  only:
    - /^(?:0|[1-9]\d*)\.(?:0|[1-9]\d*)\.(?:0|[1-9]\d*)-rc(?:0|[1-9]\d*)$/
